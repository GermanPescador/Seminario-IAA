// ~->[DNET-1]->~

// File created by an unlicensed user using Netica 5.04 on Apr 05, 2017 at 11:53:56.

bnet BotNet {
autoupdate = FALSE;

node S_t {
	kind = NATURE;
	discrete = TRUE;
	chance = CHANCE;
	states = (Attack, SearchWeapon, SearchEnergy, Explore, Flee, DetectDanger);
	parents = ();
	probs = 
		// Attack       SearchWeapon SearchEnergy Explore      Flee         DetectDanger 
		  (0.1666667,   0.1666667,   0.1666667,   0.1666667,   0.1666667,   0.1666667);
	whenchanged = 0;
	};

node S_t_next {
	kind = NATURE;
	discrete = TRUE;
	chance = CHANCE;
	states = (Attack, SearchWeapon, SearchEnergy, Explore, Flee, DetectDanger);
	parents = (S_t);
	probs = 
		// Attack       SearchWeapon SearchEnergy Explore      Flee         DetectDanger  // S_t          
		  (0.8,         0.02,        0.05,        0.01,        0.1,         0.02,         // Attack       
		   0.01,        0.7,         0.02,        0.1,         0.01,        0.16,         // SearchWeapon 
		   0.01,        0.02,        0.8,         0.07,        0.07,        0.03,         // SearchEnergy 
		   0.04,        0.04,        0.01,        0.7,         0.01,        0.2,          // Explore      
		   0.01,        0.01,        0.1,         0.01,        0.85,        0.02,         // Flee         
		   0.4,         0.04,        0.03,        0.03,        0.3,         0.2);         // DetectDanger ;
	whenchanged = 0;
	};

node Health {
	kind = NATURE;
	discrete = TRUE;
	chance = CHANCE;
	states = (High, Low);
	parents = (S_t_next);
	probs = 
		// High         Low           // S_t_next     
		  (0.75,        0.25,         // Attack       
		   0.6,         0.4,          // SearchWeapon 
		   0.3,         0.7,          // SearchEnergy 
		   0.8,         0.2,          // Explore      
		   0.15,        0.85,         // Flee         
		   0.55,        0.45);        // DetectDanger ;
	whenchanged = 0;
	};

node Weapon {
	kind = NATURE;
	discrete = TRUE;
	chance = CHANCE;
	states = (Armed, Unarmed);
	parents = (S_t_next);
	probs = 
		// Armed        Unarmed       // S_t_next     
		  (0.99,        0.01,         // Attack       
		   0.1,         0.9,          // SearchWeapon 
		   0.4,         0.6,          // SearchEnergy 
		   0.8,         0.2,          // Explore      
		   0.3,         0.7,          // Flee         
		   0.45,        0.55);        // DetectDanger ;
	whenchanged = 0;
	};

node OpponentsWeapon {
	kind = NATURE;
	discrete = TRUE;
	chance = CHANCE;
	states = (Armed, Unarmed);
	parents = (S_t_next);
	probs = 
		// Armed        Unarmed       // S_t_next     
		  (0.4,         0.6,          // Attack       
		   0.7,         0.3,          // SearchWeapon 
		   0.6,         0.4,          // SearchEnergy 
		   0.5,         0.5,          // Explore      
		   0.7,         0.3,          // Flee         
		   0.5,         0.5);         // DetectDanger ;
	whenchanged = 0;
	};

node HeardNoise {
	kind = NATURE;
	discrete = TRUE;
	chance = CHANCE;
	states = (Yes, No);
	parents = (S_t_next);
	probs = 
		// Yes          No            // S_t_next     
		  (0.7,         0.3,          // Attack       
		   0.6,         0.4,          // SearchWeapon 
		   0.65,        0.35,         // SearchEnergy 
		   0.3,         0.7,          // Explore      
		   0.6,         0.4,          // Flee         
		   0.8,         0.2);         // DetectDanger ;
	whenchanged = 0;
	};

node NearEnemies {
	kind = NATURE;
	discrete = TRUE;
	chance = CHANCE;
	states = (Many, Few);
	parents = (S_t_next);
	probs = 
		// Many         Few           // S_t_next     
		  (0.3,         0.7,          // Attack       
		   0.45,        0.55,         // SearchWeapon 
		   0.6,         0.4,          // SearchEnergy 
		   0.4,         0.6,          // Explore      
		   0.8,         0.2,          // Flee         
		   0.2,         0.8);         // DetectDanger ;
	whenchanged = 0;
	};

node PackWeapon {
	kind = NATURE;
	discrete = TRUE;
	chance = CHANCE;
	states = (Yes, No);
	parents = (S_t_next);
	probs = 
		// Yes          No            // S_t_next     
		  (0.5,         0.5,          // Attack       
		   0.9,         0.1,          // SearchWeapon 
		   0.45,        0.55,         // SearchEnergy 
		   0.6,         0.4,          // Explore      
		   0.3,         0.7,          // Flee         
		   0.4,         0.6);         // DetectDanger ;
	whenchanged = 0;
	};

node PackHealth {
	kind = NATURE;
	discrete = TRUE;
	chance = CHANCE;
	states = (Yes, No);
	parents = (S_t_next);
	probs = 
		// Yes          No            // S_t_next     
		  (0.7,         0.3,          // Attack       
		   0.2,         0.8,          // SearchWeapon 
		   0.9,         0.1,          // SearchEnergy 
		   0.6,         0.4,          // Explore      
		   0.2,         0.8,          // Flee         
		   0.45,        0.55);        // DetectDanger ;
	whenchanged = 0;
	};
ElimOrder = (Health, Weapon, OpponentsWeapon, HeardNoise, NearEnemies, PackWeapon, PackHealth, S_t, S_t_next);
};
